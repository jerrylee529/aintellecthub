// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  workspaces WorkspaceMembership[]
  invitations Invitation[]

  currentWorkspaceId String? @map(name: "current_workspace_id")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model ResetPasswordToken {
  id         String    @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
  @@map(name: "resetpassword_tokens")
}

model Workspace {
  id         String    @id @default(cuid())
  name        String
  description String?
  isDeleted   Boolean  @default(false) @map(name: "is_deleted")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")
  Memberships WorkspaceMembership[]
  invitations Invitation[]

  @@map(name: "workspaces")
}

model WorkspaceMembership {
  id             String    @id @default(cuid())
  workspaceId    String    @map(name: "workspace_id")
  userId         String    @map(name: "user_id")
  role           String
  isDeleted      Boolean   @default(false) @map(name: "is_deleted")
  joinedAt       DateTime  @default(now()) @map(name: "joined_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  user           User      @relation(fields: [userId], references: [id])
  workspace      Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, userId], name: "workspace_user_unique")
  @@map(name: "workspace_memberships")
}

model Invitation {
  id            String    @id @default(cuid())
  inviterId     String    @map(name: "inviter_id")
  inviteeEmail  String?   @map(name: "invitee_email")
  workspaceId   String    @map(name: "workspace_id")
  status        String    @default("pending") // "pending", "accepted", "expired"
  token         String    @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  expiresAt     DateTime  @map(name: "expires_at")

  inviter       User      @relation(fields: [inviterId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])

  @@map(name: "invitations")
}

